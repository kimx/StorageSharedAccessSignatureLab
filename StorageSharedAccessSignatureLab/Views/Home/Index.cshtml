@model StorageSharedAccessSignatureLab.Models.IndexModel
<div class="row">
    <div class="col-sm-12">
        <div class="panel panel-default">
            <div class="panel-heading">Basic Setting</div>
            <div class="panel-body">
                一次性設定，第一次測試前，須先執行一次
                @using (Html.BeginForm("SetCorsRules", "Home"))
                {
                    <button type="submit">Add Cros</button>
                }
            </div>
        </div>


    </div>
    <div class="col-sm-12">
        <div class="panel panel-primary">
            <div class="panel-heading">Demo</div>
            <div class="panel-body">
                @Html.TextBoxFor(m => m.ContainerUrl, new { @class = "form-control" })
                @Html.TextBoxFor(m => m.SasToken, new { @class = "form-control" })
                <br />
                <div id="fileContainer">
                    <input id="file" type="file" name="files[]" multiple>
                    <input id="btnUpload" type="button" value="Upload File" />

                </div>
                <br />
                <div id="fileUploadProgress" class="progress">
                    <div class="progress-bar" style="width:0;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery-blobuploader-master/lib/js/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery-blobuploader-master/src/jquery.blobuploader.min.js"></script>
<script>
    $('#fileContainer').blobuploader({
        url: $("#ContainerUrl").val() + $("#SasToken").val(),
        maxThread: 20,//the max thread, by default is 20
        blockSizeKB: 2048//the block size, default is 2048, should be less than 4096
        , progress: function (blob) {
            var percent = (blob.loaded / blob.size * 100).toFixed(2);
            console.log(percent);
            $('#fileUploadProgress .progress-bar').css(
                  'width',
                  percent + '%'
              );
        }

    });
    $("#btnUpload").on("click", function () {
        $('#fileContainer').blobuploader('upload');//will upload all <input type='file'/> node's target file to your container

    })
</script>

@*<script>
        //http://gauravmantri.com/2013/02/16/uploading-large-files-in-windows-azure-blob-storage-using-shared-access-signature-html-and-javascript/
        var maxBlockSize = 256 * 1024;//Each file will be split in 256 KB.
        var numberOfBlocks = 1;
        var selectedFile = null;
        var currentFilePointer = 0;
        var totalBytesRemaining = 0;
        var blockIds = new Array();
        var blockIdPrefix = "block-";
        var submitUri = null;
        var bytesUploaded = 0;

        $(document).ready(function () {
            $("#file").bind('change', handleFileSelect);

        });

        //Read the file and find out how many blocks we would need to split it.
        function handleFileSelect(e) {
            maxBlockSize = 256 * 1024;
            currentFilePointer = 0;
            totalBytesRemaining = 0;
            var files = e.target.files;
            selectedFile = files[0];
            var fileSize = selectedFile.size;
            if (fileSize < maxBlockSize) {
                maxBlockSize = fileSize;
                console.log("max block size = " + maxBlockSize);
            }
            totalBytesRemaining = fileSize;
            if (fileSize % maxBlockSize == 0) {
                numberOfBlocks = fileSize / maxBlockSize;
            } else {
                numberOfBlocks = parseInt(fileSize / maxBlockSize, 10) + 1;
            }
            console.log("total blocks = " + numberOfBlocks);
            //var baseUrl = $("#sasUrl").val();
            //var indexOfQueryStart = baseUrl.indexOf("?");
            //submitUri = baseUrl.substring(0, indexOfQueryStart) + '/' + selectedFile.name + baseUrl.substring(indexOfQueryStart);
            submitUri = $("#ContainerUrl").val() + selectedFile.name + $("#SasToken").val();
            console.log(submitUri);
        }

        var reader = new FileReader();

        reader.onloadend = function (evt) {
            if (evt.target.readyState == FileReader.DONE) { // DONE == 2
                var uri = submitUri + '&comp=block&blockid=' + blockIds[blockIds.length - 1];
                var requestData = new Uint8Array(evt.target.result);
                $.ajax({
                    url: uri,
                    type: "PUT",
                    data: requestData,
                    processData: false,
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('x-ms-blob-type', 'BlockBlob');
                        // xhr.setRequestHeader('Content-Length', requestData.length);
                    },
                    success: function (data, status) {
                        console.log(data);
                        console.log(status);
                        bytesUploaded += requestData.length;
                        var percentComplete = ((parseFloat(bytesUploaded) / parseFloat(selectedFile.size)) * 100).toFixed(2);
                      //  $("#fileUploadProgress progress-bar").css("width", percentComplete + " %");
                        $('#fileUploadProgress .progress-bar').css(
                       'width',
                       percentComplete + '%'
                   );
                        uploadFileInBlocks();
                    },
                    error: function (xhr, desc, err) {
                        console.log(desc);
                        console.log(err);
                    }
                });
            }
        };

        function uploadFileInBlocks() {
            if (totalBytesRemaining > 0) {
                console.log("current file pointer = " + currentFilePointer + " bytes read = " + maxBlockSize);
                var fileContent = selectedFile.slice(currentFilePointer, currentFilePointer + maxBlockSize);
                var blockId = blockIdPrefix + pad(blockIds.length, 6);
                console.log("block id = " + blockId);
                blockIds.push(btoa(blockId));
                reader.readAsArrayBuffer(fileContent);
                currentFilePointer += maxBlockSize;
                totalBytesRemaining -= maxBlockSize;
                if (totalBytesRemaining < maxBlockSize) {
                    maxBlockSize = totalBytesRemaining;
                }
            } else {
                commitBlockList();
            }
        }

        function commitBlockList() {
            var uri = submitUri + '&comp=blocklist';
            console.log(uri);
            var requestBody = '<?xml version="1.0" encoding="utf-8"?><BlockList>';
            for (var i = 0; i < blockIds.length; i++) {
                requestBody += '<Latest>' + blockIds[i] + '</Latest>';
            }
            requestBody += '</BlockList>';
            console.log(requestBody);
            $.ajax({
                url: uri,
                type: "PUT",
                data: requestBody,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('x-ms-blob-content-type', selectedFile.type);
                    //  xhr.setRequestHeader('Content-Length', requestBody.length);
                },
                success: function (data, status) {
                    console.log(data);
                    console.log(status);
                },
                error: function (xhr, desc, err) {
                    console.log(desc);
                    console.log(err);
                }
            });

        }
        function pad(number, length) {
            var str = '' + number;
            while (str.length < length) {
                str = '0' + str;
            }
            return str;
        }

    </script>*@